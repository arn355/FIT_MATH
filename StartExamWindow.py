# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SettingWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import json
from PyQt5 import QtCore, QtGui, QtWidgets, uic
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap

import matplotlib
matplotlib.use('Qt5Agg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
# from databases import *
import sqlite3
import random
import time
conn = sqlite3.connect('data.sqlite',check_same_thread=False)
c = conn.cursor()
c.execute("SELECT * FROM exbank")
myresult = c.fetchall()
random.shuffle(myresult)
c.execute("SELECT * FROM users")
user_data = c.fetchall()
username = [users[0] for users in user_data]
score = [users[5]/users[4]*100 for users in user_data]
score = sorted(score,reverse=True)
# print(score)
global my_name
def add_userdata(Name,Round,Start,Finish,Number,Correct):
	c.execute('INSERT INTO users(Name,Round,Start,Finish,Number,Correct) VALUES (?,?,?,?,?,?)',(Name,Round,Start,Finish,Number,Correct))
	conn.commit()
    
###################################################################################
class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        uic.loadUi("fitmath.ui", self)
        self.Groundlabel.setScaledContents(True)
        self.username = self.EnNameInput.text()
        self.StartBtn.clicked.connect(self.SelectWindow)
        self.Namebtn.clicked.connect(self.NameShow)
        self.Exitbtn.clicked.connect(self.close)

    def SelectWindow(self):
        self.set_window = SettingWindow()
        self.set_window.show()
        self.hide()
        # print(type(my_name))

    def NameShow(self):
        global my_name
        self.username = self.EnNameInput.text()
        self.textBrowser.setPlainText("Welcome "+self.username+"! LET\'s START!")
        self.EnNameInput.setText("")
        my_name = self.username
#        print("PAT & MAII ARE THE BEST")
##############################################################################################
class SettingWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(SettingWindow, self).__init__()
        uic.loadUi("SettingWindow.ui", self)
        self.BGlabel.setPixmap(QtGui.QPixmap("images/sky.jpg"))
        self.BGlabel.setScaledContents(True)
        self.num = int(self.NuExam.currentText().split(" ")[0].strip())
        self.time = float(self.TimeExam.currentText().split(" ")[0].strip())
        self.NuExam.currentTextChanged.connect(self.calculate)
        self.TimeExam.currentTextChanged.connect(self.calculate)
        self.StartButton.clicked.connect(self.startexam)
        
        # self.StartButton.clicked.connect(self.openWindowS)
    

    def calculate(self):  
        self.num = int(self.NuExam.currentText().split(" ")[0].strip())
        self.time = float(self.TimeExam.currentText().split(" ")[0].strip())
        result = self.time/self.num
        self.Meanlabel.setText("เฉลี่ยข้อละ " +str(result)+" นาที")
        
        # with open('select.txt','w') as f:
        #     f.write(str(Number)+','+str(Time))
    def startexam(self):
        self.Ui_exam = ExamWindow(self.num,self.time)
        self.Ui_exam.show()
        self.hide()
        # Ui_SettingWindow.hide()
#####################################################################################
class ExamWindow(QtWidgets.QMainWindow):
    def __init__(self,num,time):
        super(ExamWindow, self).__init__()
        uic.loadUi("fitmathExamPagesEdit1.ui", self)
        self.idx = 0
        self.sum = 0    
        self.num = num
        self.time = time
        self.score = [0]*self.num

        self.group = QtWidgets.QButtonGroup()
        self.group.addButton(self.Ch1btn)
        self.group.addButton(self.Ch2btn)
        self.group.addButton(self.Ch3btn)
        self.group.addButton(self.Ch4btn)
        self.group.addButton(self.Ch5btn)

        self.Pbtext.setPlainText(myresult[0][2])
        self.Ch1btn.setText(myresult[0][3])
        self.Ch2btn.setText(myresult[0][4])
        self.Ch3btn.setText(myresult[0][5])
        self.Ch4btn.setText(myresult[0][6])
        self.Ch5btn.setText(myresult[0][7])

        

        self.Verifybtn.clicked.connect(self.next_exam)
        # self.Verifybtn.clicked.connect(self.countdown)
        self.Backbtn.clicked.connect(self.back_exam)
        self.Sendbtn.clicked.connect(self.checkScore)

    def next_exam(self):     
        # with open('select.txt','r') as f:
        #     select = f.read()
        if self.idx < self.num:
            if self.Ch1btn.isChecked():
                self.score[self.idx] = 3
            elif self.Ch2btn.isChecked():
                self.score[self.idx] = 4
            elif self.Ch3btn.isChecked():
                self.score[self.idx] = 5
            elif self.Ch4btn.isChecked():
                self.score[self.idx] = 6
            elif self.Ch5btn.isChecked():
                self.score[self.idx] = 7
        
            self.idx +=1
            print(self.idx) 

            self.group.setExclusive(False)
            self.Ch1btn.setChecked(False)
            self.Ch2btn.setChecked(False)
            self.Ch3btn.setChecked(False)
            self.Ch4btn.setChecked(False)
            self.Ch5btn.setChecked(False)  
            self.group.setExclusive(True)

            if self.idx < self.num :
                self.Pbtext.setPlainText(myresult[self.idx][2])
                self.Ch1btn.setText(myresult[self.idx][3])
                self.Ch2btn.setText(myresult[self.idx][4])
                self.Ch3btn.setText(myresult[self.idx][5])
                self.Ch4btn.setText(myresult[self.idx][6])
                self.Ch5btn.setText(myresult[self.idx][7])

                if self.score[self.idx] == 3:
                    self.Ch1btn.setChecked(True)
                elif self.score[self.idx] == 4:
                    self.Ch2btn.setChecked(True)
                elif self.score[self.idx] == 5:
                    self.Ch3btn.setChecked(True)
                elif self.score[self.idx] == 6:
                    self.Ch4btn.setChecked(True)
                elif self.score[self.idx] == 7:
                    self.Ch5btn.setChecked(True)

        if self.idx == self.num:
             self.Pbtext.setPlainText("ทำข้อสอบครบแล้ว!")
             self.Ch1btn.setText("")
             self.Ch2btn.setText("")
             self.Ch3btn.setText("")
             self.Ch4btn.setText("")
             self.Ch5btn.setText("")       
        print(self.score)

    def back_exam(self):
        if self.idx < self.num :
            if self.Ch1btn.isChecked():
                self.score[self.idx] = 3
            elif self.Ch2btn.isChecked():
                self.score[self.idx] = 4
            elif self.Ch3btn.isChecked():
                self.score[self.idx] = 5
            elif self.Ch4btn.isChecked():
                self.score[self.idx] = 6
            elif self.Ch5btn.isChecked():
                self.score[self.idx] = 7

        if self.idx > 0:
            self.idx -=1
            print(self.idx)
        #     self.AnswerInput.clear()
            self.Pbtext.setPlainText(myresult[self.idx][2])
            self.Ch1btn.setText(myresult[self.idx][3])
            self.Ch2btn.setText(myresult[self.idx][4])
            self.Ch3btn.setText(myresult[self.idx][5])
            self.Ch4btn.setText(myresult[self.idx][6])
            self.Ch5btn.setText(myresult[self.idx][7])

            self.group.setExclusive(False)
            self.Ch1btn.setChecked(False)
            self.Ch2btn.setChecked(False)
            self.Ch3btn.setChecked(False)
            self.Ch4btn.setChecked(False)
            self.Ch5btn.setChecked(False)  
            self.group.setExclusive(True)

            if self.score[self.idx] == 3:
                self.Ch1btn.setChecked(True)
            elif self.score[self.idx] == 4:
                self.Ch2btn.setChecked(True)
            elif self.score[self.idx] == 5:
                self.Ch3btn.setChecked(True)
            elif self.score[self.idx] == 6:
                self.Ch4btn.setChecked(True)
            elif self.score[self.idx] == 7:
                self.Ch5btn.setChecked(True)

            # del Score[self.idx]
            print(self.score)

    def checkScore(self):
        self.ans = []
        for i in range(self.num):
            self.ans.append(myresult[i][self.score[i]] == myresult[i][8])
        you_score = round(sum(self.ans)/self.num * 100,2)
        print("You got "+str(sum(self.ans))+"/"+str(self.num)+' = '+str(you_score)+' %') 
        print(self.ans)
        self.Ui_Answer = AnswerWindow(self.ans)
        self.Ui_Answer.show()
        self.hide()
        # set_window.Ui_ExamWindow.hide()
        # return self.ans

    # def countdown(self): 
    #     t = self.time*60
    #     while t: 
    #         mins, secs = divmod(t, 60) 
    #         self.timer = '{:02f}:{:02f}'.format(mins, secs)
    #         self.Timelabel.setText(self.timer) 
    #         # print(self.timer, end="\r") 
    #         time.sleep(1) 
    #         t -= 1
    #     checkScore(self)
        # print('Fire in the hole!!') 
  
  
# input time in seconds 
# t = input("Enter the time in seconds: ")

 #######################################################################################################       
class AnswerWindow(QtWidgets.QMainWindow):
    def __init__(self,score):
        super(AnswerWindow, self).__init__()
        # self.setupUi(self)
        self.score = score
        txt_score = f'You got {sum(score)}/{len(score)} = {sum(score)/len(score)*100:.2f} %'
        uic.loadUi("Answer.ui", self)
        self.Wronglabel.setText(txt_score)
        for i,sc in enumerate(self.score):
            if sc :
                self.listAnswer.insertItem(i, f'ข้อ {i+1} : ถูก')
            else :
                self.listAnswer.insertItem(i, f'ข้อ {i+1} : ผิด')

        self.item = self.listAnswer.currentItem()
        self.getrow = self.listAnswer.currentRow()
        self.lblDetail.setPixmap(QPixmap('images/solution.jpg'))
        self.lblDetail.setScaledContents(True)
        self.listAnswer.clicked.connect(self.clicked)
        self.detailbtn.clicked.connect(self.add_detail)
        self.graphbtn.clicked.connect(self.add_graph)

    def clicked(self, qmodelindex):
        self.item = self.listAnswer.currentItem()
        self.getrow = self.listAnswer.currentRow()
        self.textdetail.setText(myresult[self.getrow][2]) 
        print(self.getrow)
        
    def add_detail(self):
        if self.item is not None:
            self.getrow = self.listAnswer.currentRow()
            print(myresult[self.getrow][9])
            self.lblDetail.setPixmap(QPixmap(f'Answer/{myresult[self.getrow][9]}'))
    
    def add_graph(self):
        # self.graph = GraphWindow()
        # self.graph.show()
        global my_name
        urs = sum(self.score)/len(self.score)*100

        score.append(0)
        username.append(my_name)
        plt.figure(figsize=(12,5))

        plt.subplot(1,2,1)
        plt.xlabel('Comparison')
        plt.bar(username,score,color='red')
        plt.ylabel('%Score')
        for i in range(len(score)):
            score[i] = 0
        score[-1] = urs
        plt.bar(username,score,color='blue')
        plt.subplot(1,2,2)
        plt.xlabel('Static')
        plt.ylabel('%Score')
        x = (1,2,3)
        y = (40,65,sum(self.score)/len(self.score)*100)
        plt.bar(x,y,color='purple')
        # plt.subplot(1,3,3)
        # plt.xlabel('Abilities')
        # plt.ylabel('%Score')
        # plt.bar(username,score,color='g')
        plt.show()
        self.hide()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Ui_mainWindow = MainWindow()
    Ui_mainWindow.show()
    sys.exit(app.exec_())


